* [2021-1-20 Wed] - possible topics for impedance methods paper 
** comparison of linear chirp, logarithmic chirp, white noise
*** also maybe neuron tool and/or method from pyramidal paper 
*** slew rate 
** srdjan's suggestion regarding poor access 
** analysis of asymmetric chirp response 
*** for instance, Rich2020-yl fig7 1.5 mV difference 
 
* [2021-1-28 Thu] - asym chirp response 
** asymmetric chirp response 
*** logspaced amplitude from 0.01 to 0.31 
*** want to plot assymetry (mV) vs mean squared error 
*** asymmetric.py: v0.01 - sensitivity analysis of asymmetric voltage responses in computing impedance

* [2021-1-29 Fri] - more asym chirp response 
** results from yesterday 
*** rerunning the sim because screwed up asymmetry calculation 
*** MSE increases exponentially w/ current amplitude anyway
**** much larger errors in amplitude than phase 
*** examples subfig 
from getCells import M1Cell   
s = M1Cell()  
seg = s.net.cells[0].secs['soma']['hObj'](0.5)   
from neuron import h, gui    
import numpy as np  
from chirpUtils import getChirp, applyChirpZin  
from sklearn.metrics import mean_squared_error 
 
amps = np.logspace(np.log10(0.015), np.log10(0.31), num=9, endpoint=True) 
 
f0, f1, t0, Fs, delay = 0.5, 20, 20, 1000, 5 
 
phaseErr = [] 
ampErr = [] 
asym = [] 
 
soma_v = h.Vector().record(seg._ref_v)      
time = h.Vector().record(h._ref_t)  
 
amp = 0.01  
print('Running ' + str(amp)) 
I, t = getChirp(f0, f1, t0, amp, Fs, delay) 
base = applyChirpZin(I, t, seg, t0, delay, Fs, f1)

base_v_trim = [v for v, T in zip(soma_v, time) if 4900 < T < 25100]                  
base_v_trim = np.subtract(base_v_trim, base_v_trim[0])
t_trim = [T for T in time if 4900 < T < 25100] 

amp = amps[-1]
print('Running ' + str(amp)) 
I, t = getChirp(f0, f1, t0, amp, Fs, delay) 
out = applyChirpZin(I, t, seg, t0, delay, Fs, f1)   

v_trim = [v for v, T in zip(soma_v, time) if 4900 < T < 25100]                               
v_trim = np.subtract(v_trim, v_trim[0])

from matplotlib import pyplot as plt
plt.ion()
plt.figure()
plt.subplot(2,3,1)
plt.plot([(T-5100)/1000 for T in t_trim], base_v_trim, label='0.01 mV', color='black')
plt.title('0.01 mV Assymetry', fontsize=16)
plt.xlabel('Time (s)', fontsize=14)
plt.ylabel(r'$\Delta$ V$_{memb}$ (mV)', fontsize=14)
plt.ylim(-0.6, 0.6)
plt.xlim(-0.1,20.1)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.subplot(2,3,4)
plt.plot([(T-5100)/1000 for T in t_trim], v_trim, label='1.20 mV', color='gray')
plt.title('1.20 mV Assymetry', fontsize=16)    
plt.xlabel('Time (s)', fontsize=14)
plt.ylabel(r'$\Delta$ V$_{memb}$ (mV)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.ylim(-18,18)
plt.xlim(-0.1, 20.1)
plt.subplot(2,3,2)
plt.plot(out['Freq'], out['ZinAmp'], label='1.20 mV', color='gray')
plt.plot(base['Freq'], base['ZinAmp'], label='0.01 mV', color='black')
plt.xlabel('Frequency (Hz)', fontsize=14)
plt.ylabel(r'|Z$_{in}$| (M$\Omega$)', fontsize=14)
plt.title('ZAP', fontsize=16)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.xlim(0,20.5)
plt.subplot(2,3,3)
plt.plot(out['Freq'], out['ZinPhase'], label='1.20 mV', color='gray')
plt.plot(base['Freq'], base['ZinPhase'], label='0.01 mV', color='black')
plt.xlabel('Frequency (Hz)', fontsize=14)
plt.ylabel(r'$\Phi_{in}$ (radians)', fontsize=14)
plt.title('ZPP', fontsize=16)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.xlim(0,20.5)

* [2021-1-30 Sat] - asym vs mse amp and phase 
** code for plot 
from scipy.io import loadmat 
data = loadmat('asym_sensitivity_v2.mat')
from matplotlib import pyplot as plt 
plt.ion()
import numpy as np
plt.figure()
plt.subplot(2,3,5)
# plt.plot(data['asym'][0], np.sqrt(data['ampErr'][0]), color='k', linestyle='-', linewidth=1.5)
plt.semilogx(data['asym'][0], np.sqrt(data['ampErr'][0]), color='k', linestyle='-', linewidth=1.5)
plt.scatter(data['asym'][0], np.sqrt(data['ampErr'][0]), color='k', linewidth=1.5)
plt.xlabel('Response Assymetry (mV)', fontsize=14)
plt.ylabel(r'Root Mean Squared Error (M$\Omega$)', fontsize=14)
plt.title('ZAP Error', fontsize=16)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.subplot(2,3,6)
# plt.plot(data['asym'][0], np.sqrt(data['phaseErr'][0]), color='k', linestyle='-', linewidth=1.5)
plt.semilogx(data['asym'][0], np.sqrt(data['phaseErr'][0]), color='k', linestyle='-', linewidth=1.5)
plt.scatter(data['asym'][0], np.sqrt(data['phaseErr'][0]), color='k', linewidth=1.5)
plt.xlabel('Response Assymetry (mV)', fontsize=14)
plt.ylabel(r'Root Mean Squared Error (radians)', fontsize=14)
plt.title('ZPP Error', fontsize=16)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
** [[responseAssymetry.svg][example traces, ZAPs, and ZPPs, and error graphs]]

* [2021-3-12 Fri] - refactoring code 
** putting together a separate repo from the PT impedance paper 
** rerunning validation code for M1 PT cell for soma 

* [2021-3-15 Mon] - search for K+ mediated resonance 
** looking for decent model exhibiting K+ mediated resonance 
*** granule cell, Dover2016-ov, https://senselab.med.yale.edu/ModelDB/ShowModel?model=206267&file=/GrC_FHF_ModelDB/#tabs-1
**** resonance frequencies around where it is in PTs 
*** DRG, Amir2003-ww, https://senselab.med.yale.edu/ModelDB/ShowModel?model=51022#tabs-1
**** low pass 
*** Izhikevich 2003... not sure I'm using it correctly 

* [2021-4-9 Fri] - getting back into it
** downsample impedance values 
zAmp_red = [] 
zPhase_red = [] 
while freqs_sorted[ind] <= f1: 
    find = np.argmin(np.square(np.subtract(base['Freq'],freqs_sorted[ind]))) 
    zAmp_red.append(base['ZinAmp'][find]) 
    zPhase_red.append(base['ZinPhase'][find]) 
    ind = ind + 1

* [2021-4-11 Sun] - sorting out proper validation 
** need valid impedance value for every estimated one
*** parallelized and generalized impedance validation procedure 
** looking at signal to noise ratio issues (combining noise / subthreshold oscillations + imepdance estimation)

* [2021-4-12 Mon] - log and noise 
** new functions/scripts for adding background noise and runnig log chirp 
** validation for 20 s noise frequencies still running 

* [2021-4-16 Fri] - chirp and noise comparisons 
** put together nice figure of chirp vs. noise comparison
*** should i include log chirp? - yes, log chirp is the best 
** trouble doing linear prediction
*** frequency domain mult and time domain convolution don't look right
*** may be my mistake 

* [2021-4-19 Mon] - noise parameter space 
** varied duration, window size for smoothing, and std of gaussian distribution

* [2021-4-22 Thu] - worked out issues w/ z calculation 
** previously interpolating I that is played into IClamp, now recording i from IClamp 
*** eliminates progressive errors in impedance phase 
*** [[figures/chirp_vs_logchirp_vs_noise_v2.svg][new comparison of log, chirp, and noise]] 
Comparison of using linear chirp, logarithmic chirp, and Gaussian noise 
to compute input impedance.  
Errors were computed against impedance measurements from our validation paradigm. 
Impedance amplitude and phase profiles are unfiltered. 
Top row: Linear and logarithmic chirps had instantaneous frequencies increasing 
from 0.5-20 Hz over 20 s. 
The noise stimulus was 20 s.
Left: In the low frequency range, logarithmic chirp has the largest errors. 
White noise has lower error, but there are transient spikes in |Z$_{in}$| as high 
as 6 M$\Omega$.
Linear chirp has the lowers MSE and good agreement with validated |Z$_{in}| at all
frequencies. 
Right: The same pattern can be seen in $\Phi_{in}$.
Bottom row: Linear and logarithmic chirps had instantaneous frequencies increasing 
from 0.5-500 Hz over 60 s. 
Left:  The largest errors in |Z$_{in}$| were from linear chirp, with errors at 
low frequencies as high as 20 M$\Omega#, but good agreement with validation 
|Z$_{in}$| at higher frequencies.  Logarithmic chirp has lower errors, but follows
a similar pattern.  Noise produces good agreement with validation |Z$_{in}$| across
the frequency spectrum, but still suffers from transient spikes.
Left: Computing $\Phi_{in}$ with gaussian white noise had the largest MSE with 
errors increasing at higher frequencies. Linear and logarithmic chirp have lower 
MSE, but follow the same pattern seen in |Z_{in}| with large errors at low
frequencies.
** comparison of noise durations - longer is better, but only a marginal improvement 
*** [[figures/compareNoiseDuration.svg][comparison of 2s vs 20s of white noise with 5nA std]]
** looking for optimal filter window size
*** [[figures/logChirp_errVsBinSize.svg][error vs bin size, filter before or after trim Z beyond freq lims]]
*** best for logarithmic chirp to filter before removing Z(0.5 < f < 20) w/
window size of 18

* [2021-4-23 Fri] - more optimal filter sizes 
** noise - also before removing Z(0.5 < f < 20) w/ window size of 18 - herre translates to 0.567 Hz 

* [2021-4-25 Sun] - returning to noise and response assymetry
** plusNoise.py: v0.01 - configured for linear chirp over 0.5 - 20 Hz over 50 noise parameter combos
** responseAsym.py: v0.00 - replaces assymetricNoise.py, configured for 20s chirp with amps as high as 0.31 

* [2021-4-26 Mon] - plotting yesterday's sim output 
** plotPlusNoise.py: v0.00 - plot amplitude and phase errs by amp and std of noise 
*** plotPlusNoise.py: v0.01 - adding optimal filter window size
** plusNoise.py - v0.02 - filter window sizes now range from 50-200
** plotAsym.py - v0.00 - plotting output from asymmetric chirp sims 

* [2021-4-27 Tue] - input impedance 
** bill liked, but definitely not thrilled about, existing figures 
** he and srdjan still very keen on access problem 
*** more important an issue in the apical dendrite since pipette tip needs to be
so much smaller 
*** figured out how to change input location in linear circuit builder 

* [2021-7-19 Mon] - circuit builder issues 
** trying to replicate circuit from DeFelice1997-kd, but can't export circuit to .ses  
*** from "Print matrix info": Circuit equations have 0 inconsistencies 
*** error/warning from "Create class":
Unhandled exception in event loop:
Exception None
Press ENTER to continue...                                                                           
NEURON: no label on cell port
 near line 1
 {mkclass()}
^
)
)
)
)
Exception in gui thread

* [2021-7-23 Fri] - progress with circuit builder 
** met with ted
*** wasn't saving session, instead was saving template (.hoc, rather than .ses)
*** need to label nodes, or at lease between cell and circuit 
*** suggested using different circuit layout
from neuron import h, gui 
soma = h.Section(name='soma')
h.load_file('simpleCellCircuit.ses')
*** couldn't get template working other day, just figured out how to attach, 
dont know where Isrc is 
# code
from neuron import h, gui 
soma = h.Section(name='soma')
h.load_file('secondClass.hoc')
lm = h.LM()
lm.Vm_loc(0.5, soma)

* [2021-7-27 Tue] - using fzap and simple model 
** have .ses working for chirp 
*** need to have channels to get RMP 
** olah paper
*** axon diameter:log-normal distribution with mean of 0.6 µm and variance of
0.4 µm2.

* [2021-8-2 Mon] - meeting w/ srdjan and ted today 
** notes for meeting 
*** ted seems to think no need for access resistance and junction potential,
bill and presumably srdjan feel otherwise 
**** two starter versions of the circuit 
***** [[figures/example_run_tedConfig.png][no representation of Racc]]
***** [[figures/example_run_billConfig.png][guessed some vals for Racc and J]]
*** olah paper 
**** could incorporate detailed representation of the pipette
[[figures/detailed_pipette.png][pipette values from olah]]
**** a lot of the paper's focus was on amplifier and other instrumentation - 
do we want to include this kind of detail?
*** srdjan have any useful recordings/data/values for this?
*** new circuit layout [[iclamp_circuit.ses][iclamp with junction potential]]

* [2021-12-9 Thu] - looking at sync freq from vaidya and johnston 
** code for plotting phase for trunk and oblique 
import json
from matplotlib import pyplot as plt 
import numpy as np
fig, axs = plt.subplots(1,2)
trunk = [1, 12, 22]
obliq = [102, 79, 87]
data = []
dists = []
for t in trunk:
    with open('imped_data/M1Cell_apic_' + str(t) + '.json', 'rb') as fileObj:
        tmp = json.load(fileObj)
    dists.append(tmp['dist'])
    data.append(tmp)
inds = np.argsort(dists)
for ind in inds:
    axs[0].plot(data[ind]['Freq'], data[ind]['ZcPhase'], label=str(round(data[ind]['dist']))+' um')
axs[0].set_title('Apical Trunk', fontsize=14)
axs[0].set_ylabel('Transfer Impedance Phase', fontsize=12)
axs[0].set_xlabel('Frequency (Hz)', fontsize=12)
axs[0].legend()
data = []
dists = []
for t in obliq:
    with open('imped_data/M1Cell_apic_' + str(t) + '.json', 'rb') as fileObj:
        tmp = json.load(fileObj)
    dists.append(tmp['dist'])
    data.append(tmp)
inds = np.argsort(dists)
for ind in inds:
    axs[1].plot(data[ind]['Freq'], data[ind]['ZcPhase'], label=str(round(data[ind]['dist']))+' um')
axs[1].set_title('Apical Oblique', fontsize=14)
axs[1].set_xlabel('Frequency (Hz)', fontsize=12)
axs[1].legend()

* [2021-12-13 Mon] - looking at Rich et al 2021 human cell 
** importing 
import os 
os.chdir('models/HumanCellOrganized_v2/')
from neuron import h
h.load_file('stdrun.hoc')
h.load_file('import3d.hoc')
h.load_file('SimulationParameters_PlusSomeDefinitions.hoc')
h.load_file('ModelSetup.hoc')
trunk_secs = [1,3,7,15,24,37,59,85,109,123,131,137,143,145,149,155]

* [2022-2-16 Wed] - suprathreshold/nonlinear phase 
** analog for linear phase - lag between peak of stimulus to somatic AP 
*** similar phase lead at low frequencies
*** seemingly opposite relationship between distance and "synchronous frequency"
*** suprathreshold phase response depends on amplitude / spike rates 
** M1Cell not working anymore 
** possible figs 
*** compare subthreshold to suprathreshold phase 
*** distance dependence 
*** amplitude dependence 
*** different holding currents  

* [2022-3-14 Mon] - phase precession and roll 
** phase roll paper 
*** [[https://paperpile.com/app/p/63a428b5-8425-0bb9-b995-f3c9caee4a5c][Sloin2022-pe]]
** phase roll with constant amplitude sinusoid, phase precession with ramped 
amplitude sinusoid 
** ramped sinusoid phase precession 
*** h-dependent 
*** location dependent 
*** frequency dependent?
*** amplitude / slope dependent?

* [2022-3-17 Thu] 
** DONE - put together basic figures for precession and roll 
** DONE - email kubie about how to frame for the phase precession people 
